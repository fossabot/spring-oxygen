plugins {
    id "org.springframework.boot" version "2.3.1.RELEASE"
    id "io.spring.dependency-management" version "1.0.9.RELEASE"
}

allprojects {

    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    version = '1.0.1'
    group = 'com.github.ispong'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    repositories {
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        mavenCentral()
        jcenter()
    }

    dependencies {

        // spring-web
        compileOnly 'org.springframework.boot:spring-boot-starter-web'

        // configuration-processor
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

        // lombok
        compileOnly 'org.projectlombok:lombok:latest.integration'
        annotationProcessor 'org.projectlombok:lombok:latest.integration'
    }

    bootJar { enabled false }
}

subprojects {

    publishing {
        publications {
            mavenJava(MavenPublication) {

                artifactId = project.getName()
                from components.java

                versionMapping {
                    usage('java-api') { fromResolutionOf('runtimeClasspath') }
                    usage('java-runtime') { fromResolutionResult() }
                }

                pom {

                    name = project.getName()
                    description = project.getName() + ' integration for Spring boot'
                    url = 'https://github.com/ispong/spring-oxygen/tree/master/' + project.getName() + '/src/main/java/com/ispong/oxygen/' + project.getName().split('-').last()

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'https://github.com/ispong/spring-oxygen/blob/master/LICENSE'
                        }
                    }

                    developers {
                        developer {
                            id = 'ispong'
                            name = 'ispong'
                            email = 'ispong@outlook.com'
                        }
                    }

                    scm {
                        connection = 'scm:git:git://github.com/ispong/spring-oxygen.git'
                        developerConnection = 'scm:git:ssh://github.com/ispong/spring-oxygen.git'
                        url = 'https://github.com/ispong/spring-oxygen/tree/master/' + project.getName() + '/src/main/java/com/ispong/oxygen/' + project.getName().split('-').last()
                    }
                }
            }
        }

        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/ispong/spring-oxygen")
                credentials {
                    username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                    password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
                }
            }
        }

//        repositories {
//            maven {
//                def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
//                def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
//                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
//
//                credentials {
//                    username = sonatypeUsername
//                    password = sonatypePassword
//                }
//            }
//        }
    }

//    signing {
//        sign publishing.publications.mavenJava
//    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    javadoc {
        options.encoding("UTF-8")
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    bootJar { enabled false }

    jar { enabled true }

    bootRun { enabled false }
}